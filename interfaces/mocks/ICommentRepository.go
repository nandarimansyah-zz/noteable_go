// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/ICommentRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/nandarimansyah/noteable_go/models"
	reflect "reflect"
)

// MockICommentRepository is a mock of ICommentRepository interface
type MockICommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommentRepositoryMockRecorder
}

// MockICommentRepositoryMockRecorder is the mock recorder for MockICommentRepository
type MockICommentRepositoryMockRecorder struct {
	mock *MockICommentRepository
}

// NewMockICommentRepository creates a new mock instance
func NewMockICommentRepository(ctrl *gomock.Controller) *MockICommentRepository {
	mock := &MockICommentRepository{ctrl: ctrl}
	mock.recorder = &MockICommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICommentRepository) EXPECT() *MockICommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *MockICommentRepository) CreateComment(comment models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockICommentRepositoryMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockICommentRepository)(nil).CreateComment), comment)
}

// GetComments mocks base method
func (m *MockICommentRepository) GetComments(orgName string) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", orgName)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockICommentRepositoryMockRecorder) GetComments(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockICommentRepository)(nil).GetComments), orgName)
}

// DeleteComments mocks base method
func (m *MockICommentRepository) DeleteComments(orgName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComments", orgName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteComments indicates an expected call of DeleteComments
func (mr *MockICommentRepositoryMockRecorder) DeleteComments(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComments", reflect.TypeOf((*MockICommentRepository)(nil).DeleteComments), orgName)
}
