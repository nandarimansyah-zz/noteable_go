// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/ICommentService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/nandarimansyah/noteable_go/models"
	reflect "reflect"
)

// MockICommentService is a mock of ICommentService interface
type MockICommentService struct {
	ctrl     *gomock.Controller
	recorder *MockICommentServiceMockRecorder
}

// MockICommentServiceMockRecorder is the mock recorder for MockICommentService
type MockICommentServiceMockRecorder struct {
	mock *MockICommentService
}

// NewMockICommentService creates a new mock instance
func NewMockICommentService(ctrl *gomock.Controller) *MockICommentService {
	mock := &MockICommentService{ctrl: ctrl}
	mock.recorder = &MockICommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICommentService) EXPECT() *MockICommentServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *MockICommentService) CreateComment(orgName, comment string) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", orgName, comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockICommentServiceMockRecorder) CreateComment(orgName, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockICommentService)(nil).CreateComment), orgName, comment)
}

// GetComments mocks base method
func (m *MockICommentService) GetComments(orgName string) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", orgName)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockICommentServiceMockRecorder) GetComments(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockICommentService)(nil).GetComments), orgName)
}

// DeleteComments mocks base method
func (m *MockICommentService) DeleteComments(orgName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComments", orgName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteComments indicates an expected call of DeleteComments
func (mr *MockICommentServiceMockRecorder) DeleteComments(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComments", reflect.TypeOf((*MockICommentService)(nil).DeleteComments), orgName)
}
